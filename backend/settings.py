"""
Django settings for ennacherstore project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

AUTH_USER_MODEL = 'dashboard.AuthUser'

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import cloudinary
from urllib.parse import urlparse, parse_qsl
import dj_database_url

load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('IS_DEBUG') == "True"


SECURE_SSL_REDIRECT = True
# Application definition


INSTALLED_APPS = [
    'rest_framework',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary',
    'cloudinary_storage',
    #'django_extensions',
    'channels',
    'store',
    'dashboard',
    'app',
    
    
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

tmpPostgres = urlparse(os.getenv("DATABASE_URL"))


DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=True  # surtout pour Neon ou Render
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'




# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Media configuartion 
#Media cloud settings

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get("cloudinary_cloud_name"),
    'API_KEY': os.environ.get("cloudinary_api_key"),
    'API_SECRET': os.environ.get("cloudinary_api_secret"),
    'RESOURCE_TYPE': 'raw',
}
# fichiers raw (pdf, doc, zip, etc.)


cloudinary.config( 
    cloud_name = os.environ.get('cloudinary_cloud_name'), 
    api_key = os.environ.get('cloudinary_api_key'), 
    api_secret = os.environ.get('cloudinary_api_secret'), # Click 'View API Keys' above to copy your API secret
    secure=True,
    access_mode = 'public',
    
)
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'dashboard.authentication.CookieJWTAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # Tu peux également configurer d'autres options ici
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Optionnel : définir par défaut la permission "authentifié"
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=8),  # Example: Access token valid for 5 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),   # Example: Refresh token valid for 1 day
    'ROTATE_REFRESH_TOKENS': True,                 # Recommended for security
    'BLACKLIST_AFTER_ROTATION': True,              # Recommended for security
    'AUTH_COOKIE': 'access_token',                 # Name of the cookie storing the access token
    'AUTH_COOKIE_SECURE': True,                    # True in production (HTTPS only)
    'AUTH_COOKIE_HTTP_ONLY': True,                 # Prevents client-side JS access
    'AUTH_COOKIE_SAMESITE': 'None',                 # Or 'Strict' for stricter CSRF protection
    'AUTH_COOKIE_REFRESH': 'refresh_token',        # Name of the cookie storing the refresh token
}

APPEND_SLASH=False

ALLOWED_HOSTS = [os.environ.get('ALLOWED_HOSTS')]
CORS_ALLOWED_ORIGINS = [os.environ.get('CORS_ALLOWED_ORIGINS')]


CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_SECURE = True
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = [os.environ.get('CORS_ALLOWED_ORIGINS')]